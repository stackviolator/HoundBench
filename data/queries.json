[
  {
    "description": " Return the name of every computer in the database where at least one SPN for the computer contains the string 'MSSQL'",
    "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQL') RETURN c",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "All (shortest) paths from Domain Users to High‑Value targets",
    "query": "MATCH (g:Group) WHERE g.name STARTS WITH 'DOMAIN USERS' MATCH (n {highvalue:true}), p = shortestPath((g)-[r*1..]->(n)) RETURN p",
    "source": "https://gist.github.com/seajaysec/a4d4a545047a51053d52cba567f78a9b"
  },
  {
    "description": "All Computers without LAPS - with session",
    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer)-[:HasSession]->(y) WHERE c.haslaps = false RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "All computers without LAPS and the computer is enabled",
    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.haslaps = false AND c.enabled = true RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "All enabled computers with a description",
    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.description =~ '(?i).*.*' RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "All enabled computers with a description containing the word file",
    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.description =~ '(?i).*file.*' RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "All Kerberoastable Users",
    "query": "MATCH (n {hasspn: true}) RETURN n",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "All Owned Nodes",
    "query": "MATCH (n {owned: true}) RETURN n",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "All Users with a homedirectory",
    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.homedirectory =~ '(?i).*.*' RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Can a user from one domain affect *any* computer in another domain (VERY heavy)",
    "query": "MATCH (n:User {domain: {result}}) MATCH (m:Computer {domain: {}}) MATCH p=allShortestPaths((n)-[r:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin*1..]->(m)) RETURN p",
    "source": "https://gist.github.com/seajaysec/a4d4a545047a51053d52cba567f78a9b"
  },
  {
    "description": "Computers with administrative Domain Users",
    "query": "MATCH p=(m:Group)-[r:AddMember|AdminTo|AllExtendedRights|AllowedToDelegate|CanRDP|Contains|ExecuteDCOM|ForceChangePassword|GenericAll|GenericWrite|GetChanges|GetChangesAll|HasSession|Owns|ReadLAPSPassword|SQLAdmin|TrustedBy|WriteDacl|WriteOwner|AddAllowedToAct|AllowedToAct]->(t) WHERE m.objectid ENDS WITH '-513' OR m.objectid ENDS WITH '-515' OR m.objectid ENDS WITH 'S-1-5-11' OR m.objectid ENDS WITH 'S-1-1-0' RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Constrained Delegation systems",
    "query": "MATCH p=(u)-[:AllowedToDelegate]->(c) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Count the LAPS status of all computers",
    "query": "MATCH (c:Computer) RETURN c.haslaps, COUNT(*)",
    "source": "https://redfoxsec.com/blog/bloodhound-cheat-sheet/"
  },
  {
    "description": "Custom privileged groups that are **not** built‑in and not marked high‑value",
    "query": "MATCH (g:Group {admincount:true, highvalue:false, domain: $result}) WHERE NOT (g.objectid =~ $domain_admins OR g.objectid =~ $enterprise_admins OR g.objectid =~ $administrators OR g.objectid =~ $account_operators OR g.objectid CONTAINS $replicators OR g.objectid =~ $key_admins OR g.objectid =~ $read_only_domain_controllers OR g.objectid =~ $enterprise_key_admins OR g.objectid =~ $schema_admins) RETURN g",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/privileged.json"
  },
  {
    "description": "Find all active Domain Admin sessions",
    "query": "MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = (c:Computer)-[:HasSession]->(n) return p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find all AS-REP-roastable users",
    "query": "MATCH (u:User {dontreqpreauth: true}) RETURN u.name",
    "source": "https://redfoxsec.com/blog/bloodhound-cheat-sheet/"
  },
  {
    "description": "Find all Certificate Templates",
    "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find all computers domain users can RDP to",
    "query": "MATCH p=(g:Group)-[:CanRDP]->(c:Computer) WHERE g.objectid ENDS WITH '-513' RETURN p",
    "source": "https://redfoxsec.com/blog/bloodhound-cheat-sheet/"
  },
  {
    "description": "Find all computers with unsupported operating systems",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ \\'.*(2000|2003|2008|xp|vista|7|me).*\\'AND H.enabled = true RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find all domain admins",
    "query": "MATCH (n:User)-[:MemberOf*1..]->(g:Group {name: \"DOMAIN ADMINS@\"}) RETURN n",
    "source": "https://www.wwt.com/api-new/attachments/66a7b8d6ddfa33117e771706/file"
  },
  {
    "description": "Find all Domain Admins (nested SID S-1-5-21-.*-512) having a session opened on a domain computer",
    "query": "MATCH (m:User)-[r:MemberOf*1..]->(n:Group) WHERE n.objectid =~ '(?i)S-1-5-.*-512' WITH m MATCH q=((m)<-[:HasSession]-(o:Computer)) RETURN q",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find all edges any owned user has on a computer",
    "query": "MATCH p=shortestPath((m:User)-[r]->(b:Computer)) WHERE m.owned RETURN p",
    "source": "https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/"
  },
  {
    "description": "Find All edges any owned user has on a computer",
    "query": "MATCH p=shortestPath((m:User)-[r*]->(b:Computer)) WHERE m.owned RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find all local admins",
    "query": "MATCH (n:User)-[:AdminTo]->(m:Computer) RETURN n, m",
    "source": "https://www.wwt.com/api-new/attachments/66a7b8d6ddfa33117e771706/file"
  },
  {
    "description": "Find all other Rights Domain Users shouldn't have",
    "query": "MATCH p=(m:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(n:Computer) WHERE m.objectid ENDS WITH '-513' OR m.objectid ENDS WITH '-515' OR m.objectid ENDS WITH 'S-1-5-11' OR m.objectid ENDS WITH 'S-1-1-0' RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find all Owners of Azure Applications",
    "query": "MATCH p = (n)-[r:AZOwns]->(g:AZApp) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find all paths from users to Domain Admins group",
    "query": "MATCH p=shortestPath((n:User)-[*1..]->(m:Group)) WHERE m.name = \"DOMAIN ADMINS@INTERNAL.LOCAL\" RETURN p",
    "source": "https://gist.githubusercontent.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b/raw/b6b41de85726679d37e2829f09adc66b33d86907/BloodhoundCheatSheet.md"
  },
  {
    "description": "Find all paths to an Azure KeyVault",
    "query": "MATCH p = (n)-[r]->(g:AZKeyVault) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find all paths to an Azure VM",
    "query": "MATCH p = (n)-[r]->(g:AZVM) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find all principals with certificate enrollment rights (Enroll, AllExtendedRights, or GenericAll) on certificate templates",
    "query": "MATCH p = ()-[:Enroll|AllExtendedRights|GenericAll]->(ct:CertTemplate) RETURN p",
    "source": "https://posts.specterops.io/adcs-attack-paths-in-bloodhound-part-1-799f3d3b03cf"
  },
  {
    "description": "Find all Privileged Service Principals",
    "query": "MATCH p = (g:AZServicePrincipal)-[r]->(n) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find all sessions",
    "query": "MATCH (n:User)-[:HasSession]->(m:Computer) RETURN n, m",
    "source": "https://www.wwt.com/api-new/attachments/66a7b8d6ddfa33117e771706/file"
  },
  {
    "description": "Find all sessions any user in a specific domain has",
    "query": "MATCH p=(m:Computer)-[r:HasSession]->(n:User) WHERE n.domain IS NOT NULL RETURN p",
    "source": "Community contribution by @joshtmerrill"
  },
  {
    "description": "Find all users a part of the VPN group",
    "query": "MATCH p=(u:User)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' return p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find all users with 'AddMember' rights on groups",
    "query": "MATCH p=(g:Group)-[:AddMember]->(m:Group) RETURN p",
    "source": "https://gist.githubusercontent.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b/raw/b6b41de85726679d37e2829f09adc66b33d86907/BloodhoundCheatSheet.md"
  },
  {
    "description": "Find all users with 'AdminTo' rights on computers",
    "query": "MATCH p=(g:Group)-[:AdminTo]->(c:Computer) RETURN p",
    "source": "https://gist.githubusercontent.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b/raw/b6b41de85726679d37e2829f09adc66b33d86907/BloodhoundCheatSheet.md"
  },
  {
    "description": "Find all users with 'AllExtendedRights' on computers",
    "query": "MATCH p=(g:Group)-[:AllExtendedRights]->(c:Computer) RETURN p",
    "source": "https://gist.githubusercontent.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b/raw/b6b41de85726679d37e2829f09adc66b33d86907/BloodhoundCheatSheet.md"
  },
  {
    "description": "Find all users with 'CanPSRemote' rights on computers",
    "query": "MATCH p=(g:Group)-[:CanPSRemote]->(c:Computer) RETURN p",
    "source": "https://gist.githubusercontent.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b/raw/b6b41de85726679d37e2829f09adc66b33d86907/BloodhoundCheatSheet.md"
  },
  {
    "description": "Find all users with 'CanRDP' rights on computers",
    "query": "MATCH p=(g:Group)-[:CanRDP]->(c:Computer) RETURN p",
    "source": "https://gist.githubusercontent.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b/raw/b6b41de85726679d37e2829f09adc66b33d86907/BloodhoundCheatSheet.md"
  },
  {
    "description": "Find all users with 'ExecuteDCOM' rights on computers",
    "query": "MATCH p=(g:Group)-[:ExecuteDCOM]->(c:Computer) RETURN p",
    "source": "https://gist.githubusercontent.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b/raw/b6b41de85726679d37e2829f09adc66b33d86907/BloodhoundCheatSheet.md"
  },
  {
    "description": "Find all users with 'ForceChangePassword' rights on users",
    "query": "MATCH p=(g:Group)-[:ForceChangePassword]->(u:User) RETURN p",
    "source": "https://gist.githubusercontent.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b/raw/b6b41de85726679d37e2829f09adc66b33d86907/BloodhoundCheatSheet.md"
  },
  {
    "description": "Find all users with 'GenericAll' rights on computers",
    "query": "MATCH p=(g:Group)-[:GenericAll]->(c:Computer) RETURN p",
    "source": "https://gist.githubusercontent.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b/raw/b6b41de85726679d37e2829f09adc66b33d86907/BloodhoundCheatSheet.md"
  },
  {
    "description": "Find all users with 'GenericWrite' rights on computers",
    "query": "MATCH p=(g:Group)-[:GenericWrite]->(c:Computer) RETURN p",
    "source": "https://gist.githubusercontent.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b/raw/b6b41de85726679d37e2829f09adc66b33d86907/BloodhoundCheatSheet.md"
  },
  {
    "description": "Find all users with 'HasSession' on computers",
    "query": "MATCH p=(g:Group)-[:HasSession]->(c:Computer) RETURN p",
    "source": "https://gist.githubusercontent.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b/raw/b6b41de85726679d37e2829f09adc66b33d86907/BloodhoundCheatSheet.md"
  },
  {
    "description": "Find all users with 'MemberOf' relationships",
    "query": "MATCH p=(g:Group)-[:MemberOf]->(m:Group) RETURN p",
    "source": "https://gist.githubusercontent.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b/raw/b6b41de85726679d37e2829f09adc66b33d86907/BloodhoundCheatSheet.md"
  },
  {
    "description": "Find all users with 'Owns' rights on computers",
    "query": "MATCH p=(g:Group)-[:Owns]->(c:Computer) RETURN p",
    "source": "https://gist.githubusercontent.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b/raw/b6b41de85726679d37e2829f09adc66b33d86907/BloodhoundCheatSheet.md"
  },
  {
    "description": "Find all users with 'WriteDacl' rights on computers",
    "query": "MATCH p=(g:Group)-[:WriteDacl]->(c:Computer) RETURN p",
    "source": "https://gist.githubusercontent.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b/raw/b6b41de85726679d37e2829f09adc66b33d86907/BloodhoundCheatSheet.md"
  },
  {
    "description": "Find all users with 'WriteOwner' rights on computers",
    "query": "MATCH p=(g:Group)-[:WriteOwner]->(c:Computer) RETURN p",
    "source": "https://gist.githubusercontent.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b/raw/b6b41de85726679d37e2829f09adc66b33d86907/BloodhoundCheatSheet.md"
  },
  {
    "description": "Find all users with an SPN (Kerberoastable users)",
    "query": "MATCH (n:User) WHERE n.hasspn=true RETURN n",
    "source": "https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/"
  },
  {
    "description": "Find all users with passwords set over 1440 days ago (47 months)",
    "query": "MATCH (u:User) WHERE u.enabled=true AND u.pwdlastset < (datetime().epochseconds - (1440 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find all users with passwords set over 720 days ago (23 months)",
    "query": "MATCH (u:User) WHERE u.enabled=true AND u.pwdlastset < (datetime().epochseconds - (720 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find all‑shortest paths where non‑privileged users have dangerous rights to the AdminSDHolder object",
    "query": "MATCH p=allshortestpaths((u:User {enabled:true, admincount:false, domain: $result})-[*]->(c:Container)) WHERE c.distinguishedname CONTAINS 'ADMINSDHOLDER' RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/persistence.json"
  },
  {
    "description": "Find all‑shortest paths where non‑privileged users have DCSync rights to a Domain object",
    "query": "MATCH p=allshortestpaths((u:User {enabled:true, admincount:false, domain: $result})-[r:MemberOf|DCSync*1..]->(:Domain)) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/persistence.json"
  },
  {
    "description": "Find all‑shortest paths where principals can add Shadow Credentials to other principals",
    "query": "MATCH p=allshortestpaths((a {domain: $result})-[:MemberOf|AddKeyCredentialLink*1..]->(b)) WHERE NOT a=b RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/persistence.json"
  },
  {
    "description": "Find an object from domain 'A' that can do anything to a foreign object",
    "query": "MATCH p=(n)-[r]->(d) WHERE NOT d.domain=n.domain AND n.domain IS NOT NULL AND d.domain IS NOT NULL RETURN p",
    "source": "Community contribution by @joshtmerrill"
  },
  {
    "description": "Find an object in one domain that can do something to a foreign object",
    "query": "MATCH p=(n)-[r]->(m) WHERE NOT n.domain = m.domain RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Certificate Authorities",
    "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Certificate Authorities with HTTP Web Enrollment (ESC8)",
    "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`Web Enrollment` = 'Enabled' RETURN n",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Certificate Authorities with User Specified SAN (ESC6)",
    "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`User Specified SAN` = 'Enabled' RETURN n",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find computers that allow unconstrained delegation that AREN'T domain controllers.",
    "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate",
    "query": "MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find computers with owned Admins",
    "query": "MATCH p=shortestPath((n:User {owned:true})-[r:AdminTo|MemberOf*1..]->(c:Computer)) return p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find constrained delegation",
    "query": "MATCH p=(u:User)-[:AllowedToDelegate]->(c:Computer) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Domain Admin sessions not on domain controllers",
    "query": "OPTIONAL MATCH (c:Computer)-[:MemberOf]->(t:Group) WHERE NOT t.name = 'DOMAIN CONTROLLERS@TESTLAB.LOCAL' WITH c AS NonDC MATCH p=(NonDC)-[:HasSession]->(n:User)-[:MemberOf]->(g:Group {name:'DOMAIN ADMINS@TESTLAB.LOCAL'}) RETURN DISTINCT n.name AS Username, COUNT(DISTINCT NonDC) AS Connexions ORDER BY COUNT(DISTINCT NonDC) DESC",
    "source": "https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/"
  },
  {
    "description": "Find enabled Certificate Templates",
    "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.Enabled = true RETURN n",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find enabled Certificate Templates",
    "query": "MATCH (n:GPO {enabled:true, type:'Certificate Template', domain: $result}) RETURN n",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Enrollment Agent Templates (ESC3)",
    "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`)  RETURN n",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find if unprivileged users have rights to add members into groups",
    "query": "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find instances where a User has GenericAll privileges on a Container",
    "query": "MATCH p=(n:User)-[:GenericAll]->(c:Container) RETURN p",
    "source": "https://posts.specterops.io/cypher-queries-in-bloodhound-enterprise-c7221a0d4bb3"
  },
  {
    "description": "Find Misconfigured Certificate Templates (ESC1)",
    "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true  RETURN n",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Misconfigured Certificate Templates (ESC2)",
    "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`)  RETURN n",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find multi hop low privilege group rights (up to 6 hops)",
    "query": "MATCH (g:Group) WHERE g.objectid ENDS WITH '-S-1-1-0' OR g.objectid ENDS WITH '-S-1-5-11' OR g.objectid ENDS WITH '-513' OR g.objectid ENDS WITH '-515' OR g.objectid ENDS WITH '-S-1-5-32-545' OR g.objectid ENDS WITH '-S-1-5-32-554' MATCH p=(g)-[r1:MemberOf*1..6]->(g2:Group)-[r2]->(n) WHERE n<>g AND g<>g2 AND NOT type(r2)='MemberOf' AND NOT (g2.objectid ENDS WITH '-S-1-1-0' OR g2.objectid ENDS WITH '-S-1-5-11' OR g2.objectid ENDS WITH '-513' OR g2.objectid ENDS WITH '-515' OR g2.objectid ENDS WITH '-S-1-5-32-545' OR g2.objectid ENDS WITH '-S-1-5-32-554') RETURN DISTINCT p",
    "source": "Community contribution by @knavesec"
  },
  {
    "description": "Find non-Tier Zero principals with ADCSESCx edges to Tier Zero ADCS templates",
    "query": "MATCH p = \n(n)-[:ADCSESC1|ADCSESC3|ADCSESC4|ADCSESC6a|ADCSESC6b|ADCSESC9a|ADCSESC9b|ADCSESC10a|ADCSESC10b|ADCSESC13]->(m)\nWHERE \"admin_tier_0\" IN split(m.system_tags, ' ')\nAND (n.system_tags IS NULL OR NOT \"admin_tier_0\" IN split(n.system_tags, ' '))\nRETURN p",
    "source": "https://troopers.de/downloads/troopers24/TR24_Analyzing_and_Executing_ADCS_KZYMD8.pdf"
  },
  {
    "description": "Find OU issues related to the new dMSA attack (may need updates)",
    "query": "MATCH (u:User)-[r:GenericAll|GenericWrite|WriteOwner|WriteDacl|WriteProperty|CreateChild]->(o:OU) RETURN u, r, o",
    "source": "Community contribution by @knavesec"
  },
  {
    "description": "Find owned Domain Admins",
    "query": "MATCH (n:Group) WHERE n.name CONTAINS 'DOMAIN ADMINS' AND n.owned=true WITH n MATCH p=(n)<-[r:MemberOf*1..]-(m) RETURN p",
    "source": "Community contribution by @joshtmerrill"
  },
  {
    "description": "Find owned Groups",
    "query": "MATCH (n:User {owned: true})-[r:MemberOf]->(g:Group) RETURN g",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find principals with privileged access to an Azure tenancy",
    "query": "MATCH (a) WHERE (a:User OR a:AZUser) WITH a MATCH p=(a)-[r:MemberOf|AZGlobalAdmin|AZPrivilegedRoleAdmin*1..]->(azt:AZTenant) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/aad.json"
  },
  {
    "description": "Find Server 2000 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2000).*' AND H.enabled = true RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Server 2000 with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2000).*' RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Server 2003 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2003).*' AND H.enabled = true RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Server 2003 with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2003).*' RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Server 2008 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2008).*' AND H.enabled = true RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Server 2008 with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2008).*' RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Server 2012 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2012).*' AND H.enabled = true RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Server 2012 with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2012).*' RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Server 2016 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2016).*' AND H.enabled = true RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Server 2016 with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2016).*' RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Server 2019 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2019).*' AND H.enabled = true RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Server 2019 with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2019).*' RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Server 2022 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2022).*' AND H.enabled = true RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Server 2022 with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2022).*' RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find servers a user can RDP into",
    "query": "MATCH p=(g:Group)-[:CanRDP]->(c:Computer) WHERE g.objectid ENDS WITH '-513' AND c.operatingsystem CONTAINS 'Server' RETURN p",
    "source": "https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/"
  },
  {
    "description": "Find servers Domain Users can RDP to",
    "query": "MATCH p=(g:Group)-[:CanRDP]->(c:Computer) WHERE g.name STARTS WITH 'DOMAIN USERS' AND c.operatingsystem CONTAINS 'Server' RETURN p",
    "source": "https://gist.github.com/seajaysec/a4d4a545047a51053d52cba567f78a9b"
  },
  {
    "description": "Find Shortest Path from owned Node to Domain Admin",
    "query": "MATCH (n:User {owned:true}), (m:Group) WHERE m.name CONTAINS 'DOMAIN ADMINS' WITH n, m MATCH p=shortestPath((n)-[r:MemberOf|AdminTo|HasSession|Contains|GpLink|Owns|DCSync|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner*1..]->(m)) RETURN p",
    "source": "Community contribution by @joshtmerrill"
  },
  {
    "description": "Find shortest path to domain admin",
    "query": "MATCH p=shortestPath((n:User {name:\"\"})-[:MemberOf*1..]->(g:Group {name:\"DOMAIN ADMINS@\"})) RETURN p",
    "source": "https://www.wwt.com/api-new/attachments/66a7b8d6ddfa33117e771706/file"
  },
  {
    "description": "Find single hop low privilege group rights",
    "query": "MATCH (g:Group) WHERE g.objectid ENDS WITH '-S-1-1-0' OR g.objectid ENDS WITH '-S-1-5-11' OR g.objectid ENDS WITH '-513' OR g.objectid ENDS WITH '-515' OR g.objectid ENDS WITH '-S-1-5-32-545' OR g.objectid ENDS WITH '-S-1-5-32-554' MATCH p=(g)-[r]->(n) WHERE n<>g AND NOT type(r)='MemberOf' RETURN DISTINCT p",
    "source": "Community contribution by @knavesec"
  },
  {
    "description": "Find SPNs with keywords (e.g., 'SQL')",
    "query": "MATCH (u:User) WHERE ANY (x IN u.serviceprincipalnames WHERE toUpper(x) CONTAINS 'SQL') RETURN u",
    "source": "https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/"
  },
  {
    "description": "Find the Shortest path to a high value target from an owned object",
    "query": "MATCH p=shortestPath((g {owned:true})-[*1..]->(n {highvalue:true})) WHERE  g<>n return p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find the Shortest path to a unconstrained delegation system from an owned object",
    "query": "MATCH (n) MATCH p=shortestPath((n)-[*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m AND n.owned = true RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Un-Supported OS and Enabled",
    "query": "MATCH (n:Computer) WHERE n.operatingsystem =~ '(?i).*(2000|2003|2008|xp|vista|7|me).*' AND n.enabled = true RETURN n",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find unsupported operating systems",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '.*(2000|2003|2008|xp|vista|7|me).*' RETURN H",
    "source": "https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/"
  },
  {
    "description": "Find users created in the last 30 days",
    "query": "MATCH (u:User) where u.enabled=true and u.whencreated  > (datetime().epochseconds - (30 * 86400)) RETURN u",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find users that belong to high value groups",
    "query": "match (u1:User) WHERE u1.plaintext=True MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find users that can RDP into something",
    "query": "match (u1:User) WHERE u1.plaintext=True MATCH p1=(u1)-[:CanRDP*1..]->(c:Computer) RETURN u1",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find users that don't require Kerberos pre-authentication (AS-REP Roasting)",
    "query": "MATCH (u:User {dontreqpreauth: true}) RETURN u",
    "source": "https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/"
  },
  {
    "description": "Find users that haven't logged on in 720 days and account is still active",
    "query": "MATCH (n:User) WHERE n.lastlogon < (datetime().epochseconds - (720 * 86400)) AND n.enabled=true RETURN n ",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find users that logged in within the last 90 days",
    "query": "MATCH (u:User) WHERE u.lastlogon > (datetime().epochseconds - (90 * 86400)) AND NOT u.lastlogon IN [-1.0, 0.0] RETURN u",
    "source": "https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/"
  },
  {
    "description": "Find users with blank passwords that are enabled",
    "query": "MATCH (u:User) WHERE NOT u.userpassword IS null AND u.enabled = true RETURN u.name,u.userpassword",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find users with passwords last set within the last 90 days",
    "query": "MATCH (u:User) WHERE u.pwdlastset > (datetime().epochseconds - (90 * 86400)) AND NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
    "source": "https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/"
  },
  {
    "description": "Find users with Temp in user title and created in the last 30 days",
    "query": "MATCH (u:User) where u.enabled=true and u.whencreated  > (datetime().epochseconds - (30 * 86400)) AND u.title CONTAINS 'Temp' RETURN u",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find users' credentials in description fields",
    "query": "MATCH (m:User) WHERE m.description CONTAINS 'password' RETURN m.name, m.description",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Users/Groups with direct access to GPOs",
    "query": "MATCH p = (n)-[r:AddMember|AddSelf|WriteSPN|AddKeyCredentialLink|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner|Owns]->(g:GPO) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find what groups can RDP",
    "query": "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Windows 7 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(7).*' AND H.enabled = true RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Windows 7 session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(7).*' RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Windows XP and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(xp).*' AND H.enabled = true RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find Windows XP with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(xp).*' RETURN H",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Find workstations a user can RDP into",
    "query": "MATCH p=(g:Group)-[:CanRDP]->(c:Computer) WHERE g.objectid ENDS WITH '-513' AND NOT c.operatingsystem CONTAINS 'Server' RETURN p",
    "source": "https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/"
  },
  {
    "description": "Get a list of all OS versions containing 'Server'",
    "query": "MATCH (c:Computer) WHERE c.operatingsystem CONTAINS 'Server' RETURN DISTINCT c.operatingsystem",
    "source": "https://redfoxsec.com/blog/bloodhound-cheat-sheet/"
  },
  {
    "description": "Get a list of all OS versions with a count",
    "query": "MATCH (c:Computer) RETURN DISTINCT c.operatingsystem, COUNT(c.operatingsystem)",
    "source": "https://redfoxsec.com/blog/bloodhound-cheat-sheet/"
  },
  {
    "description": "Get active sessions of Domain Admins",
    "query": "MATCH (u:User)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = (c:Computer)-[:HasSession]->(u) RETURN c.name, u.name",
    "source": "https://redfoxsec.com/blog/bloodhound-cheat-sheet/"
  },
  {
    "description": "Get all Domain Admins",
    "query": "MATCH (g:Group) WHERE g.name =~ '(?i).*DOMAIN ADMINS.*' WITH g MATCH (g)<-[r:MemberOf*1..]-(a) RETURN a.name",
    "source": "https://redfoxsec.com/blog/bloodhound-cheat-sheet/"
  },
  {
    "description": "Get all Windows 2008 computers and sort by last logon timestamp descending and human-readable",
    "query": "MATCH (c:Computer) WHERE c.operatingsystem CONTAINS '2008' RETURN c.name, c.operatingsystem, datetime({ epochSeconds: toInteger(c.lastlogon) }) AS rdate ORDER BY rdate DESC",
    "source": "https://redfoxsec.com/blog/bloodhound-cheat-sheet/"
  },
  {
    "description": "Get the local admins to all computers",
    "query": "MATCH p=(u:User)-[r:AdminTo]->(c:Computer) RETURN u.name, c.name ORDER BY u.name",
    "source": "https://redfoxsec.com/blog/bloodhound-cheat-sheet/"
  },
  {
    "description": "Groups of High Value Targets",
    "query": "MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Groups with Computer and User Objects",
    "query": "MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT groupsWithComps as groupsWithCompsAndUsers",
    "source": "Community contribution by @joshtmerrill"
  },
  {
    "description": "Identify principals used for AD ↔ AAD directory sync",
    "query": "MATCH (u) WHERE (u:User OR u:AZUser) AND (u.name =~ '(?i)^MSOL_|.*AADConnect.*' OR u.userprincipalname =~ '(?i)^sync_.*') OPTIONAL MATCH (u)-[:HasSession]->(s:Session) RETURN u, s",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/aad.json"
  },
  {
    "description": "Kerberoastable Admins",
    "query": "MATCH (n:Group) WHERE n.objectid ENDS WITH '-512' WITH n MATCH p=(n)<-[:MemberOf*1..]-(m {hasspn: true}) RETURN p",
    "source": "Community contribution by @joshtmerrill"
  },
  {
    "description": "List all Certificate Templates (Certipy data required)",
    "query": "MATCH (n:GPO {type:'Certificate Template', domain: $result}) RETURN n",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List all domains",
    "query": "MATCH (d:Domain) RETURN d",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List all enabled Azure users",
    "query": "MATCH (u:AZUser {enabled:true}) RETURN u",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/aad.json"
  },
  {
    "description": "List all GPOs in a domain",
    "query": "MATCH (g:GPO {domain: $result}) RETURN g",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List all groups in a domain",
    "query": "MATCH (g:Group {domain: $result}) RETURN g",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List all High Valued Targets",
    "query": "MATCH (m) WHERE m.highvalue=true RETURN m",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List all owned & enabled users",
    "query": "MATCH (u:User {owned:true, enabled:true, domain: $result}) RETURN u",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "List all owned computers",
    "query": "MATCH (m:Computer) WHERE m.owned=true RETURN m",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List all owned computers in a selected domain",
    "query": "MATCH (c:Computer {owned:true, domain: $result}) RETURN c ORDER BY c.name",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "List all owned groups",
    "query": "MATCH (m:Group) WHERE m.owned=true RETURN m",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List all owned users",
    "query": "MATCH (m:User) WHERE m.owned=true RETURN m",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List all owned users in a selected domain",
    "query": "MATCH (u:User {owned:true, domain: $result}) RETURN u",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "List all principals with \"SQLAdmin\" permission on computers",
    "query": "MATCH p=(a {domain: $result})-[:MemberOf|SQLAdmin*1..]->(c:Computer) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/domain.json"
  },
  {
    "description": "List all principals with Local-Admin permission",
    "query": "MATCH p=(a {domain: $result})-[:MemberOf|AdminTo*1..]->(c:Computer) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List all principals with RDP permission",
    "query": "MATCH p=(a {domain: $result})-[:MemberOf|CanRDP*1..]->(c:Computer) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List all Tenancy objects (AzureHound required)",
    "query": "MATCH (t:AZTenant) RETURN t",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/aad.json"
  },
  {
    "description": "List all user sessions (sessions data required)",
    "query": "MATCH p=(u:User {domain: $result})<-[r:HasSession]-(c:Computer) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/domain.json"
  },
  {
    "description": "List Certificate Authority servers (Certipy data required)",
    "query": "MATCH (n:GPO {type:'Enrollment Service', domain: $result}) RETURN n",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List computers WITHOUT LAPS",
    "query": "MATCH (c:Computer {haslaps:false, domain: $result}) RETURN c ORDER BY c.name",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List domain computers",
    "query": "MATCH (c:Computer {domain: $result}) RETURN c",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List domain controllers",
    "query": "MATCH (c:Computer {domain: $result})-[:MemberOf]->(g:Group) WHERE g.samaccountname CONTAINS 'Domain Controllers' RETURN c",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List domain trusts",
    "query": "MATCH p=(n:Domain)-->(m:Domain) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List enabled principals with Constrained Delegation",
    "query": "MATCH (a {enabled: true, domain: $result}) WHERE exists(a.`allowedtodelegate`) RETURN a",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List enabled principals with Unconstrained Delegation",
    "query": "MATCH (a {unconstraineddelegation: true, enabled: true, domain: $result}) RETURN a",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List enabled users in a domain",
    "query": "MATCH (u:User {enabled:true, domain: $result}) RETURN u",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List enabled users that don't require passwords",
    "query": "MATCH (u:User {passwordnotreqd:true, enabled:true, domain: $result}) RETURN u",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/domain.json"
  },
  {
    "description": "List enabled users that have never logged in",
    "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE u.lastlogontimestamp=-1.0 RETURN u",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/domain.json"
  },
  {
    "description": "List enabled users that logged in within the last 90 days",
    "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE u.lastlogon > (datetime().epochseconds - (90 * 86400)) AND NOT u.lastlogon IN [-1.0, 0.0] RETURN u",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/domain.json"
  },
  {
    "description": "List enabled users that set a password within the last 90 days",
    "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE u.pwdlastset > (datetime().epochseconds - (90 * 86400)) AND NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/domain.json"
  },
  {
    "description": "List enabled users who are members of foreign domains' groups",
    "query": "MATCH p=(u:User {enabled:true, domain: $result})-[:MemberOf*1..]->(g:Group) WHERE NOT u.domain = g.domain RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/domain.json"
  },
  {
    "description": "List enabled users whose password never expires",
    "query": "MATCH (u:User {pwdneverexpires:true, enabled:true, domain: $result}) RETURN u",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/domain.json"
  },
  {
    "description": "List enabled users whose password never expires and hasn't changed in a year",
    "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE u.pwdneverexpires=true AND u.pwdlastset < (datetime().epochseconds - (365 * 86400)) AND NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/domain.json"
  },
  {
    "description": "List enabled users with a non-null userPassword attribute",
    "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE u.userpassword IS NOT null RETURN u",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/domain.json"
  },
  {
    "description": "List enabled users with an e-mail address",
    "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE exists(u.email) RETURN u",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List high-value targets in a domain",
    "query": "MATCH (a {highvalue: true, domain: $result}) RETURN a",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List network shares (excluding SYSVOL)",
    "query": "MATCH (a {domain: $result}) WHERE (any(prop IN keys(a) WHERE a[prop] CONTAINS '\\\\' AND NOT a[prop] CONTAINS 'SYSVOL')) RETURN a",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List non-managed service accounts (Kerberoastable SVC accounts)",
    "query": "MATCH (u:User {hasspn:true, domain: $result}) WHERE NOT u.name CONTAINS '$' AND NOT u.name CONTAINS 'KRBTGT' RETURN u",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List non-privileged users with most dangerous permissions",
    "query": "MATCH (u:User {enabled: true, admincount: false, domain: $result})-[r]->(a) RETURN u, COUNT(DISTINCT type(r)) AS permissions ORDER BY permissions DESC LIMIT 10",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List the groups of all owned users",
    "query": "MATCH (m:User) WHERE m.owned=true WITH m MATCH p=(m)-[:MemberOf*1..]->(n:Group) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "List users whose description field is populated",
    "query": "MATCH (u:User {domain: $result}) WHERE u.description IS NOT null RETURN u",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/domain.json"
  },
  {
    "description": "Locate enabled accounts with display name of admin - put anyname in you like",
    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.displayname =~ '(?i).*admin*' AND u.enabled = true RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Most exploitable paths from owned objects to High Value Targets (5 hops)",
    "query": "MATCH p=allShortestPaths((n {owned:true})-[:MemberOf|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory*1..5]->(m {highvalue:true})) WHERE NOT n=m RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Most exploitable shortest‑paths to Domain Admins",
    "query": "MATCH (n:User),(m:Group {name:{result}}), p = shortestPath((n)-[r:MemberOf|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin*1..]->(m)) RETURN p",
    "source": "https://gist.github.com/seajaysec/a4d4a545047a51053d52cba567f78a9b"
  },
  {
    "description": "Next steps (3 hops) from owned objects",
    "query": "MATCH p=shortestPath((c {owned: true})-[*1..3]->(s)) WHERE NOT c = s RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Next steps (5 hops) from owned objects",
    "query": "MATCH p=shortestPath((c {owned: true})-[*1..5]->(s)) WHERE NOT c = s RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Non Admin Groups with High Value Privileges",
    "query": "MATCH p=(g:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(n:Computer)  WHERE NOT g.name CONTAINS 'ADMIN' RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Owned groups that grant access to network shares",
    "query": "MATCH p=(u:User {owned:true, domain: $result})-[:MemberOf*1..]->(g:Group) WHERE any(prop IN keys(g) WHERE g[prop] CONTAINS '\\\\') RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Owned principals → Azure Apps → Service Principals with dangerous rights",
    "query": "MATCH p=(n {enabled:true, owned:true, domain: $result})-[:AZOwns]->(azapp:AZApp)-[r1]->(azsp:AZServicePrincipal)-[r:AZGlobalAdmin|AZPrivilegedRoleAdmin*1..]->(azt:AZTenant) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Owned users whose group memberships grant privileged Azure‑tenant access",
    "query": "MATCH p=(n {owned:true, enabled:true, domain: $result})-[:MemberOf*1..]->(g:Group)-[r:AZGlobalAdmin|AZPrivilegedRoleAdmin*1..]->(:AZTenant) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Owned users with direct privileged access to an Azure tenancy",
    "query": "MATCH p=(n {owned:true, enabled:true, domain: $result})-[r:MemberOf|AZGlobalAdmin|AZPrivilegedRoleAdmin*1..]->(:AZTenant) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Owned users with permissions against GPOs",
    "query": "MATCH p=(u:User {owned:true})-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Owned + enabled users that have an e‑mail address",
    "query": "MATCH (u:User {owned:true, enabled:true, domain: $result}) WHERE exists(u.email) RETURN u",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Owned + enabled users with Local‑Admin rights, active sessions and their groups",
    "query": "MATCH p=(u:User {owned:true, enabled:true, domain: $result})-[:MemberOf|AdminTo*1..]->(c:Computer) OPTIONAL MATCH p2=(c)-[:HasSession]->(u2:User) OPTIONAL MATCH p3=(u2:User)-[:MemberOf*1..]->(:Group) RETURN p, p2, p3",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Owned + enabled users with RDP rights, active sessions and their groups",
    "query": "MATCH p=(u:User {owned:true, enabled:true, domain: $result})-[:MemberOf|CanRDP*1..]->(c:Computer) OPTIONAL MATCH p2=(c)-[:HasSession]->(u2:User) OPTIONAL MATCH p3=(u2:User)-[:MemberOf*1..]->(:Group) RETURN p, p2, p3",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Owned + enabled users with SQLAdmin rights",
    "query": "MATCH p=(u:User {owned:true, enabled:true, domain: $result})-[:MemberOf|SQLAdmin*1..]->(c:Computer) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Paths from Domain Users to Domain Admins **excluding RDP**",
    "query": "MATCH (n:User),(m:Group {name:{result}}), p = shortestPath((n)-[r:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin*1..]->(m)) RETURN p",
    "source": "https://gist.github.com/seajaysec/a4d4a545047a51053d52cba567f78a9b"
  },
  {
    "description": "Privileged users who are **not** members of the “Protected Users” group (selected domain)",
    "query": "MATCH (u:User {admincount:true, domain: $result}), (u)-[:MemberOf*1..]->(g) WHERE g.name CONTAINS 'Protected Users' WITH COLLECT(u) AS protectedUsers MATCH (u2:User {admincount:true, domain: $result}) WHERE NOT u2 IN protectedUsers RETURN u2",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/privileged.json"
  },
  {
    "description": "Return All Azure AD Groups that are synchronized with On-Premise AD",
    "query": "MATCH (n:Group) WHERE n.objectid CONTAINS 'S-1-5' AND n.azsyncid IS NOT NULL RETURN n",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Return All Azure Admins and their owned Devices",
    "query": "MATCH p=(d:AZDevice)<-[r1:AZOwns]->(m:AZUser)<-[r2:AZHasRole]->(n) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Return All Azure Users and their Admin Roles",
    "query": "MATCH p=(n)-[:AZHasRole|AZMemberOf*1..]->(:AZRole) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Return All Azure Users that are part of the 'Global Administrator' Role",
    "query": "MATCH p =(n)-[r:AZGlobalAdmin*1..]->(m) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Return All On-Prem users with edges to Azure",
    "query": "MATCH  p=(m:User)-[r:AZResetPassword|AZOwns|AZUserAccessAdministrator|AZContributor|AZAddMembers|AZGlobalAdmin|AZVMContributor|AZOwnsAZAvereContributor]->(n) WHERE m.objectid CONTAINS 'S-1-5-21' RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Return GUEST Azure Users and their Groups",
    "query": "MATCH p=(m:AZUser)-[r:AZMemberOf*1..]->(n) WHERE NOT m.objectid CONTAINS 'S-1-5' AND m.userprincipalname=~ '(?i).*#EXT#.*' RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Return users with a variant of \"password\" in their password and a path to high value targets (limit to 25 results)",
    "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\"  MATCH p=shortestPath((u1:User)-[*1..]->(n {highvalue:true})) WHERE  u1<>n return u1 LIMIT 25",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Return users with a variant of \"password\" in their password and are high value targets",
    "query": "MATCH (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\" MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Return users with a variant of \"password\" in their password and have local admin on at least one computer",
    "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\" match p=(u1:User)-[r:AdminTo]->(n:Computer) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Return users with seasons in their password and a path to high value targets (limit to 25 results)",
    "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" MATCH p=shortestPath((u1:User)-[*1..]->(n {highvalue:true})) WHERE  u1<>n return u1 LIMIT 25",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Return users with seasons in their password and are high value targets",
    "query": "MATCH (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Return users with seasons in their password and have local admin on at least one computer",
    "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" match p=(u1:User)-[r:AdminTo]->(n:Computer) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Route all group memberships of owned + enabled users",
    "query": "MATCH p=(u:User {owned:true, enabled:true, domain: $result})-[:MemberOf*1..]->(g:Group) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Route all sessions of owned users to computers",
    "query": "MATCH p=(u:User {owned:true, domain: $result})<-[r:HasSession]-(c:Computer) RETURN p ORDER BY c.name",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Route owned‑user sessions to computers without LAPS",
    "query": "MATCH p=(u:User {owned:true, domain: $result})<-[r:HasSession]-(c:Computer {haslaps:false}) RETURN p ORDER BY c.name",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Route owned + enabled users to non‑privileged groups",
    "query": "MATCH p=(u:User {owned:true, enabled:true, domain: $result})-[:MemberOf*1..]->(g:Group {admincount:false}) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Route owned + enabled users to privileged groups",
    "query": "MATCH p=(u:User {owned:true, enabled:true, domain: $result})-[:MemberOf*1..]->(g:Group {admincount:true}) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Route principals that control Azure Apps (AzApp → AzSP → tenancy)",
    "query": "MATCH (a) WHERE (a:User OR a:AZUser) WITH a MATCH p=(a)-[:MemberOf|AZOwns|AZAppAdmin*1..]->(azapp:AZApp) OPTIONAL MATCH p2=(azapp)-[:AZRunsAs]->(azsp:AZServicePrincipal) OPTIONAL MATCH p3=(azsp)-[:MemberOf|AZGlobalAdmin|AZPrivilegedRoleAdmin*1..]->(azt:AZTenant) RETURN p, p2, p3",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/aad.json"
  },
  {
    "description": "Route top non-privileged users with dangerous permissions to their targets",
    "query": "MATCH (u:User {enabled: true, admincount: false, domain: $result})-[r]->(a) WITH u, COUNT(DISTINCT type(r)) AS permissions ORDER BY permissions DESC LIMIT 10 MATCH p=allshortestpaths((u)-[r]->(a)) WHERE NOT u = a RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Routes from owned principals to high‑value targets",
    "query": "MATCH p=allShortestPaths((o {owned:true, enabled:true, domain: $result})-[*]->(a {highvalue: true})) WHERE NOT o = a RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Routes from owned + enabled users to principals with Unconstrained Delegation",
    "query": "MATCH p=allshortestpaths((o:User {owned:true, enabled:true, domain: $result})-[*]->(a {unconstraineddelegation: true, enabled: true})) WHERE NOT o = a RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Search for key words in users title such as scientist or Executive - tweak as required",
    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.title =~ '(?i).*scientist*' AND u.enabled = true RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Shortest path from Domain Users to High‑Value targets",
    "query": "MATCH (g:Group),(n {highvalue:true}), p = shortestPath((g)-[r*1..]->(n)) WHERE g.name STARTS WITH 'DOMAIN USERS' RETURN p",
    "source": "https://gist.github.com/seajaysec/a4d4a545047a51053d52cba567f78a9b"
  },
  {
    "description": "Shortest paths from Azure users with dangerous rights to other principals",
    "query": "MATCH (a) WHERE (a:User OR a:AZUser) WITH a MATCH p=allShortestPaths((u:AZUser)-[*]->(a)) WHERE NOT a=u RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/aad.json"
  },
  {
    "description": "Shortest paths from owned objects to High Value Targets (5 hops)",
    "query": "MATCH p=shortestPath((n {owned:true})-[:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory|CanPSRemote*1..5]->(m {highvalue:true})) WHERE NOT n=m RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Shortest paths from owned principals to unconstrained delegation systems",
    "query": "MATCH (n {owned:true}) MATCH p=shortestPath((n)-[:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory|CanPSRemote*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Shortest paths from owned + enabled users with dangerous rights to any node",
    "query": "MATCH p=allshortestpaths((u:User {owned:true, enabled:true, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a)) WHERE NOT a = u RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Shortest paths from users to Azure service principals and on to other principals",
    "query": "MATCH (a) WHERE (a:User OR a:AZUser) WITH a MATCH p=allShortestPaths((a)-[*]->(azsp:AZServicePrincipal)-[*]->(b)) WHERE NOT a=b RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/aad.json"
  },
  {
    "description": "Shortest paths to Azure VMs",
    "query": "MATCH p=allshortestpaths((a)-[*]->(vm:AZVM)) WHERE NOT a=vm RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/aad.json"
  },
  {
    "description": "Shortest Paths to Enrollment Agent Templates from Owned Principals (ESC3)",
    "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`) return p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC1)",
    "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true return p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC2)",
    "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`) return p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Shortest paths to principals with Global Administrator rights",
    "query": "MATCH p=(ga)-[:AZGlobalAdmin|AZPrivilegedAdminRole*1..]->(:AZTenant) WHERE (ga:User OR ga:AZUser) WITH ga MATCH p=allshortestpaths((a)-[*]->(ga)) WHERE NOT a=ga RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/aad.json"
  },
  {
    "description": "Shortest Paths to Vulnerable Certificate Authority Access Control (ESC7)",
    "query": "MATCH p=shortestPath((g)-[r:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ManageCa|ManageCertificates*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Enrollment Service' RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Shortest Paths to Vulnerable Certificate Authority Access Control from Owned Principals (ESC7)",
    "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Enrollment Service' and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Shortest Paths to Vulnerable Certificate Template Access Control (ESC4)",
    "query": "MATCH p=shortestPath((g)-[:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Shortest Paths to Vulnerable Certificate Template Access Control from Owned Principals (ESC4)",
    "query": "MATCH p=allShortestPaths((g {owned:true})-[r*1..]->(n:GPO)) WHERE g<>n and n.type = 'Certificate Template' and n.Enabled = true and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') return p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Shortest paths: owned + enabled users with dangerous rights → groups",
    "query": "MATCH p=allshortestpaths((u:User {owned:true, enabled:true, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(:Group)) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Shortest paths: owned + enabled users with dangerous rights → other users",
    "query": "MATCH p=allshortestpaths((o:User {owned:true, enabled:true, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(u:User)) WHERE NOT o = u RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/owned.json"
  },
  {
    "description": "Show enabled Azure users and their Azure-group memberships",
    "query": "MATCH p=(azu:AZUser {enabled:true})-[:MemberOf*1..]->(azg:AZGroup) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/aad.json"
  },
  {
    "description": "Show enrollment rights for a selected Certificate Template",
    "query": "MATCH p=(g)-[:Enroll|AutoEnroll]->(n:GPO {name:$result, type:'Certificate Template'}) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/queries/domain.json"
  },
  {
    "description": "Show privileges for a selected Certificate Authority",
    "query": "MATCH p=(g)-[:ManageCa|ManageCertificates|Auditor|Operator|Read|Enroll]->(n:GPO {name:$result}) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Show Rights for Certificate Authority",
    "query": "MATCH p=(g)-[:ManageCa|ManageCertificates|Auditor|Operator|Read|Enroll]->(n:GPO) WHERE n.type = 'Enrollment Service' return p",
    "source": "Community contribution by @joshtmerrill"
  },
  {
    "description": "Top-10 users with cross-domain sessions (requires sessions)",
    "query": "MATCH p=(g1:Group)<-[:MemberOf*1..]-(u:User {enabled:true, domain: $result})<-[r:HasSession]-(c:Computer) WHERE NOT u.domain = c.domain WITH u, count(r) AS rel_count ORDER BY rel_count DESC LIMIT 10 MATCH p=(c:Computer)-[r:HasSession]->(u) WHERE NOT u.domain = c.domain RETURN p ORDER BY c.name",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Top-10 users with most Local Admin rights (in a chosen domain)",
    "query": "MATCH (n:User {domain: $result}),(m:Computer), (n)-[r:AdminTo]->(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH n, count(r) AS rel_count ORDER BY rel_count DESC LIMIT 10 MATCH p=(m)<-[r:AdminTo]-(n) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Top-10 users with most Sessions (requires collected sessions)",
    "query": "MATCH (n:User {domain: $result}),(m:Computer), (n)<-[r:HasSession]-(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH n, count(r) AS rel_count ORDER BY rel_count DESC LIMIT 10 MATCH p=(m)-[r:HasSession]->(n) RETURN p",
    "source": "https://raw.githubusercontent.com/InfamousSYN/bloodhound-queries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Top Ten Computers with the most local‑admin principals",
    "query": "MATCH (n:User),(m:Computer),(n)-[r:AdminTo]->(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH m, COUNT(r) AS rel_count ORDER BY rel_count DESC LIMIT 10 MATCH p=(m)<-[r:AdminTo]-(n) RETURN p",
    "source": "https://gist.github.com/seajaysec/a4d4a545047a51053d52cba567f78a9b"
  },
  {
    "description": "Unconstrained Delegation systems",
    "query": "MATCH (c {unconstraineddelegation:true}) return c",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Unconstrained Delegation systems (without domain controllers)",
    "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2 {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Users never logged on and account still active",
    "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=true RETURN n ",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Users with adminCount, not sensitive for delegation, not members of Protected Users",
    "query": "MATCH (u)-[:MemberOf*1..]->(g:Group) WHERE g.objectid =~ \"(?i)S-1-5-.*-525\" WITH COLLECT (u.name) as protectedUsers MATCH p=(u2:User)-[:MemberOf*1..3]->(g2:Group) WHERE u2.admincount=true AND u2.sensitive=false AND NOT u2.name IN protectedUsers RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "Users with most local admin rights",
    "query": "MATCH (U:User)-[r:MemberOf|AdminTo*1..]->(C:Computer) WITH U.name as n, COUNT(DISTINCT(C)) AS c RETURN n,c ORDER BY c DESC LIMIT 5",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "View all Group Policy Objects (GPOs)",
    "query": "MATCH (n:GPO) RETURN n",
    "source": "https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/"
  },
  {
    "description": "View all groups that contain the word 'admin'",
    "query": "MATCH (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n",
    "source": "https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/"
  },
  {
    "description": "Where can owned users RDP",
    "query": "MATCH p=(m:User {owned: true})-[r:MemberOf|CanRDP*1..]->(n:Computer) RETURN p",
    "source": "https://raw.githubusercontent.com/ZephrFish/Bloodhound-CustomQueries/refs/heads/main/customqueries.json"
  },
  {
    "description": "All Computers in Domain Admins group",
    "query": "MATCH p = (c:Computer)-[:MemberOf]->(g:Group) WHERE toUpper(g.name) STARTS WITH 'DOMAIN ADMINS' OR g.objectid ENDS WITH '-512' RETURN p",
    "source": "https://blog.compass-security.com/2020/07/make-the-most-out-of-bloodhound/"
  },
  {
    "description": "All Computers that are local administrators to another computer",
    "query": "MATCH p = (c1:Computer)-[:AdminTo]->(c2:Computer) RETURN p",
    "source": "https://blog.compass-security.com/2020/07/make-the-most-out-of-bloodhound/"
  },
  {
    "description": "Domains with Machine Account Quota > 0",
    "query": "MATCH (d:Domain) WHERE toInteger(d.machineaccountquota) > 0 RETURN d",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Interesting objects by sensitive keywords in name / description",
    "query": "UNWIND ['admin','empfindlich','geheim','important','azure','MSOL','kennwort','pass','secret','sensib','sensitiv','wichtig','backdoor','honey'] AS word MATCH p = (:Domain)-[:Contains*1..]->(b:Base) WHERE toLower(b.name) CONTAINS toLower(word) OR toLower(b.description) CONTAINS toLower(word) RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Users with clear‑text password attributes (userpassword / unixpassword / sfupassword / unicodepassword)",
    "query": "MATCH p = (:Domain)-[:Contains*1..]->(u:User) WHERE u.userpassword <> '' OR u.unixpassword <> '' OR u.sfupassword <> '' OR u.unicodepassword <> '' RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Users whose passwords are stored with reversible encryption",
    "query": "MATCH p = (:Domain)-[:Contains*1..]->(:Base {encryptedtextpwdallowed: true}) RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Users with the same sAMAccountName in different domains",
    "query": "MATCH p = (:Domain)-[:Contains*1..]->(u1:User),(u2:User) WHERE u1.samaccountname = u2.samaccountname AND u1.domain <> u2.domain RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Tier 0 objects (any node tagged admin_tier_0)",
    "query": "MATCH p = (:Domain)-[:Contains*1..]->(n:Base) WHERE 'admin_tier_0' IN split(n.system_tags,' ') RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Tier 0 users",
    "query": "MATCH p = (u:User)-[:MemberOf]->(:Base) WHERE 'admin_tier_0' IN split(u.system_tags,' ') RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Tier 0 computers",
    "query": "MATCH p = (c:Computer)-[:MemberOf]->(:Base) WHERE 'admin_tier_0' IN split(c.system_tags,' ') RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Users in the Protected Users group",
    "query": "MATCH p = (:Base)-[:MemberOf*1..]->(:Group {samaccountname:'Protected Users'}) RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Users marked ‘Account is sensitive and cannot be delegated’",
    "query": "MATCH p = (:Base {sensitive:true})-[:MemberOf*1..]->(:Group) RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Tier 0 user logons on non‑Tier 0 computers",
    "query": "MATCH p = (c:Computer)-[:HasSession*1..]->(u:User) WHERE 'admin_tier_0' IN split(u.system_tags,' ') AND (NOT 'admin_tier_0' IN split(c.system_tags,' ') OR c.system_tags IS NULL) RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Non‑Tier 0 principals with local‑admin rights",
    "query": "MATCH p = (b:Base)-[:AdminTo]->(:Computer) WHERE NOT 'admin_tier_0' IN split(b.system_tags,' ') OR b.system_tags IS NULL RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Non‑Tier 0 principals with DCSync capability",
    "query": "MATCH p = allShortestPaths((b:Base)-[:MemberOf|GenericAll|DCSync*1..]->(d:Domain)) WHERE b <> d AND (NOT 'admin_tier_0' IN split(b.system_tags,' ') OR b.system_tags IS NULL) RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Non‑Tier 0 principals that can read LAPS passwords",
    "query": "MATCH p = (b:Base)-[:AllExtendedRights|ReadLAPSPassword]->(:Computer) WHERE NOT 'admin_tier_0' IN split(b.system_tags,' ') OR b.system_tags IS NULL RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Non‑Tier 0 principals with RDP/administrative access",
    "query": "MATCH p = (b:Base)-[:AdminTo]->(:Computer) WHERE NOT 'admin_tier_0' IN split(b.system_tags,' ') OR b.system_tags IS NULL RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Computers that belong to Tier 0 groups",
    "query": "MATCH p = (:Computer {isdc:false})-[:MemberOf*1..]->(g:Group) WHERE 'admin_tier_0' IN split(g.system_tags,' ') RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "LAPS passwords readable by non‑admin principals",
    "query": "MATCH p = (b:Base)-[:AllExtendedRights|ReadLAPSPassword|GenericAll]->(:Computer {haslaps:true}) WHERE NOT 'admin_tier_0' IN split(b.system_tags,' ') OR b.system_tags IS NULL RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "LAPS passwords readable via owned principals",
    "query": "MATCH p = (u)-[:MemberOf*1..]->(:Group)-[:GenericAll]->(t:Computer {haslaps:true}) WHERE 'owned' IN split(u.system_tags,' ') RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Principals with ACL rights over computers (excluding Tier 0)",
    "query": "MATCH p = (b)-[{isacl:true}]->(:Computer) WHERE (b:User OR b:Computer OR b:Group) AND (NOT 'admin_tier_0' IN split(b.system_tags,' ') OR b.system_tags IS NULL) RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "dMSA accounts controlled by non‑Tier 0 principals (BadSuccessor)",
    "query": "MATCH p = (d:Computer)<-[:WriteDacl|Owns|GenericAll|GenericWrite|WriteOwner]-(n:Base) WHERE d.`msds-delegatedmsastate` IS NOT NULL AND (NOT 'admin_tier_0' IN split(n.system_tags,' ') OR n.system_tags IS NULL) RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Interesting GPOs by keyword",
    "query": "UNWIND ['firewall','defender','vpn','laps','antivirus','cyberark','powershell','msc','edr','sentinel'] AS word MATCH p = (g:GPO)-[:GPLink*1..]->(:Base) WHERE toLower(g.name) CONTAINS toLower(word) RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Non‑admin principals with dangerous GPO permissions",
    "query": "MATCH p = (u:User)-[:AddMember|AddSelf|WriteSPN|AddKeyCredentialLink|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner|Owns]->(:GPO) WHERE NOT 'admin_tier_0' IN split(u.system_tags,' ') OR u.system_tags IS NULL RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Published certificate templates",
    "query": "MATCH p = (ct:CertTemplate)-[:PublishedTo]->(:EnterpriseCA) RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "ESC 1/3/4/13 certificate‑template abuse paths from non‑Tier 0 principals",
    "query": "MATCH p = (b)-[:ADCSESC1|ADCSESC3|ADCSESC4|ADCSESC13]->() WHERE NOT 'admin_tier_0' IN split(b.system_tags,' ') OR b.system_tags IS NULL RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "ESC15 (EKUwu) vulnerable certificate‑template chains",
    "query": "MATCH p = (:Base)-[:Enroll|AllExtendedRights]->(ct:CertTemplate)-[:PublishedTo]->(:EnterpriseCA)-[:TrustedForNTAuth]->(:NTAuthStore)-[:NTAuthStoreFor]->(:Domain) WHERE ct.enrolleesuppliessubject = true AND ct.authenticationenabled = false AND ct.requiresmanagerapproval = false AND ct.schemaversion = 1 RETURN p",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_CE_Custom_Queries.md"
  },
  {
    "description": "Principals in Server / Account / Print Operators (SIDs ‑548, ‑549, ‑550) that are **not** yet tagged Tier 0",
    "query": "MATCH (g:Group) WHERE (g.system_tags IS NULL OR NOT 'admin_tier_0' IN split(g.system_tags,' ')) AND (g.objectid =~ '(?i).*S-1-5-.*-548' OR g.objectid =~ '(?i).*S-1-5-.*-549' OR g.objectid =~ '(?i).*S-1-5-.*-550') RETURN g",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_Operator_Custom_Queries.md"
  },
  {
    "description": "Principals with direct DCSync privilege on a Domain (not yet Tier 0)",
    "query": "MATCH (n)-[:DCSync|AllExtendedRights|GenericAll]->(:Domain) WHERE (n.system_tags IS NULL OR NOT 'admin_tier_0' IN split(n.system_tags,' ')) RETURN n",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_Operator_Custom_Queries.md"
  },
  {
    "description": "Principals with DCSync **or** GetChanges / GetChangesAll on Domain (not yet Tier 0)",
    "query": "MATCH (n)-[:DCSync|AllExtendedRights|GenericAll|GetChanges|GetChangesAll]->(:Domain) WHERE (n.system_tags IS NULL OR NOT 'admin_tier_0' IN split(n.system_tags,' ')) RETURN n",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_Operator_Custom_Queries.md"
  },
  {
    "description": "Users or computers with Unconstrained Delegation that are not Tier 0",
    "query": "MATCH (n) WHERE (n:User OR n:Computer) AND n.unconstraineddelegation = true AND (n.system_tags IS NULL OR NOT 'admin_tier_0' IN split(n.system_tags,' ')) RETURN n",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_Operator_Custom_Queries.md"
  },
  {
    "description": "Principals with Local‑Admin (`AdminTo`) or `ForceChangePassword` rights (not Tier 0)",
    "query": "MATCH (n)-[:AdminTo|ForceChangePassword]->(b) WHERE (n.system_tags IS NULL OR NOT 'admin_tier_0' IN split(n.system_tags,' ')) RETURN n",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_Operator_Custom_Queries.md"
  },
  {
    "description": "Principals with privileged rights on computers (GenericAll, WriteDacl, etc.) not tagged Tier 0",
    "query": "MATCH (n)-[:AllowedToDelegate|ExecuteDCOM|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner]->(:Computer) WHERE (n.system_tags IS NULL OR NOT 'admin_tier_0' IN split(n.system_tags,' ')) RETURN n",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_Operator_Custom_Queries.md"
  },
  {
    "description": "Principals with rights over Cert Publishers group (SID ‑517) that are not Tier 0",
    "query": "MATCH (n)-[:GenericAll|GenericWrite|MemberOf|Owns|WriteDacl|WriteOwner]->(g:Group) WHERE g.objectid =~ '(?i).*S-1-5-21-.*-517' AND (n.system_tags IS NULL OR NOT 'admin_tier_0' IN split(n.system_tags,' ')) RETURN n",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_Operator_Custom_Queries.md"
  },
  {
    "description": "Principals who belong to Tier 0 groups but lack the Tier 0 tag",
    "query": "MATCH (n)-[:MemberOf*1..]->(g:Group) WHERE (n.system_tags IS NULL OR NOT 'admin_tier_0' IN split(n.system_tags,' ')) AND g.system_tags CONTAINS 'admin_tier_0' RETURN n",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_Operator_Custom_Queries.md"
  },
  {
    "description": "Tier 0‑tagged users / computers that are disabled or inactive > 180 days",
    "query": "MATCH (uc) WHERE uc.system_tags CONTAINS 'admin_tier_0' AND ((uc:User AND uc.enabled = false) OR (uc:Computer AND ((uc.enabled = false) OR (uc.lastlogon > 0 AND uc.lastlogon < (timestamp()/1000 - 15552000)) OR (uc.lastlogontimestamp > 0 AND uc.lastlogontimestamp < (timestamp()/1000 - 15552000))))) RETURN uc",
    "source": "https://raw.githubusercontent.com/CompassSecurity/bloodhoundce-resources/refs/heads/main/custom_queries/BloodHound_Operator_Custom_Queries.md"
  },
  {
    "description": "Groups with foreign‑domain group membership",
    "query": "MATCH p=(n:Group {domain:$result})-[:MemberOf]->(m:Group) WHERE m.domain <> n.domain AND n.name <> m.name RETURN p",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "Kerberoastable members of high‑value groups",
    "query": "MATCH p = shortestPath((n:User)-[:MemberOf]->(g:Group)) WHERE g.highvalue = true AND n.hasspn = true RETURN p",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "Kerberoastable users ordered by count of computers they can locally admin",
    "query": "MATCH (u:User {hasspn:true}) OPTIONAL MATCH (u)-[:AdminTo]->(c1:Computer) OPTIONAL MATCH (u)-[:MemberOf*1..]->(:Group)-[:AdminTo]->(c2:Computer) WITH u, COLLECT(c1) + COLLECT(c2) AS allComps UNWIND allComps AS comp RETURN u, COUNT(DISTINCT comp) AS adminCount ORDER BY adminCount DESC",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "Shortest paths to Domain Admins from Kerberoastable users",
    "query": "MATCH p = shortestPath((n:User {hasspn:true})-[:{}*1..]->(m:Group {name:$result})) RETURN p",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "Members of high‑privileged Azure AD roles",
    "query": "MATCH p = (n)-[:AZHasRole|AZMemberOf*1..2]->(r:AZRole) WHERE r.displayname =~ '(?i)Global Administrator|User Administrator|Cloud Application Administrator|Authentication Policy Administrator|Exchange Administrator|Helpdesk Administrator|Privileged Authentication Administrator' RETURN p",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "On‑prem‑synced users in high‑privileged Azure AD roles",
    "query": "MATCH p = (n)-[:AZHasRole|AZMemberOf*1..2]->(r:AZRole) WHERE n.onpremisesyncenabled = true AND r.displayname =~ '(?i)Global Administrator|User Administrator|Cloud Application Administrator|Authentication Policy Administrator|Exchange Administrator|Helpdesk Administrator|Privileged Authentication Administrator' RETURN p",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "Azure users with a path to high‑value targets",
    "query": "MATCH (m:AZUser), (n {highvalue:true}), p = shortestPath((m)-[r*1..]->(n)) WHERE NONE (rel IN relationships(p) WHERE type(rel) IN ['GetChanges','GetChangesAll']) AND m <> n RETURN p",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "On‑prem‑synced Azure users with paths to high‑value targets",
    "query": "MATCH (m:AZUser) WHERE m.onpremisesyncenabled = true WITH m MATCH (n {highvalue:true}), p = shortestPath((m)-[r*1..]->(n)) WHERE NONE (rel IN relationships(p) WHERE type(rel) IN ['GetChanges','GetChangesAll']) AND m <> n RETURN p",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "Shortest paths to privileged Azure AD roles",
    "query": "MATCH (role:AZRole) WHERE role.displayname =~ '(?i)Global Administrator|User Administrator|Cloud Application Administrator|Authentication Policy Administrator|Exchange Administrator|Helpdesk Administrator|Privileged Authentication Administrator' WITH role MATCH (m), p = shortestPath((m)-[r*1..]->(role)) WHERE m <> role RETURN p",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "Azure applications with paths to high‑value targets",
    "query": "MATCH (app:AZApp), (target {highvalue:true}), p = shortestPath((app)-[r*1..]->(target)) WHERE NONE (rel IN relationships(p) WHERE type(rel) IN ['GetChanges','GetChangesAll']) AND app <> target RETURN p",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "Shortest paths to Azure subscriptions",
    "query": "MATCH (sub:AZSubscription) WITH sub MATCH (m), p = shortestPath((m)-[r*1..]->(sub)) WHERE m <> sub RETURN p",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "Shortest paths from **owned** principals to privileged Azure AD roles",
    "query": "MATCH (role:AZRole) WHERE role.displayname =~ '(?i)Global Administrator|User Administrator|Cloud Application Administrator|Authentication Policy Administrator|Exchange Administrator|Helpdesk Administrator|Privileged Authentication Administrator' WITH role MATCH (m {owned:true}), p = shortestPath((m)-[r*1..]->(role)) WHERE m <> role RETURN p",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "Service principals that can grant arbitrary app roles via MS Graph",
    "query": "MATCH p = (sp)-[:AZMGGrantAppRoles]->(t:AZTenant) RETURN p",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "Service principals with MS Graph app‑role assignment permissions",
    "query": "MATCH p = (sp:AZServicePrincipal)-[:AZMGAppRoleAssignment_ReadWrite_All|AZMGApplication_ReadWrite_All|AZMGDirectory_ReadWrite_All|AZMGGroupMember_ReadWrite_All|AZMGGroup_ReadWrite_All|AZMGRoleManagement_ReadWrite_Directory|AZMGServicePrincipalEndpoint_ReadWrite_All]->(:AZServicePrincipal) RETURN p",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "Direct controllers of Microsoft Graph service principal",
    "query": "MATCH p = (n)-[:AZAddOwner|AZAddSecret|AZAppAdmin|AZCloudAppAdmin|AZMGAddOwner|AZMGAddSecret|AZOwns]->(g:AZServicePrincipal {appdisplayname:'Microsoft Graph'}) RETURN p",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "Shortest paths to Microsoft Graph service principal",
    "query": "MATCH p = shortestPath((n)-[r*1..]->(g:AZServicePrincipal {appdisplayname:'Microsoft Graph'})) WHERE n <> g RETURN p",
    "source": "https://raw.githubusercontent.com/SpecterOps/BloodHound-Legacy/refs/heads/master/src/components/SearchContainer/Tabs/PrebuiltQueries.json"
  },
  {
    "description": "Return every node in the BloodHound graph",
    "query": "MATCH (n) RETURN n",
    "source": "https://raw.githubusercontent.com/SadProcessor/Cheats/refs/heads/master/DogWhispererV2.md"
  },
  {
    "description": "Return every User node",
    "query": "MATCH (u:User) RETURN u",
    "source": "https://raw.githubusercontent.com/SadProcessor/Cheats/refs/heads/master/DogWhispererV2.md"
  },
  {
    "description": "Nodes where the custom property `test` exists (any value)",
    "query": "MATCH (n) WHERE exists(n.test) RETURN n",
    "source": "https://raw.githubusercontent.com/SadProcessor/Cheats/refs/heads/master/DogWhispererV2.md"
  },
  {
    "description": "Nodes where the custom property `test` is **missing**",
    "query": "MATCH (n) WHERE NOT exists(n.test) RETURN n",
    "source": "https://raw.githubusercontent.com/SadProcessor/Cheats/refs/heads/master/DogWhispererV2.md"
  },
  {
    "description": "Nodes whose property `test` equals `helloWorld`",
    "query": "MATCH (n) WHERE n.test = 'helloWorld' RETURN n",
    "source": "https://raw.githubusercontent.com/SadProcessor/Cheats/refs/heads/master/DogWhispererV2.md"
  },
  {
    "description": "All sessions of all users (any domain)",
    "query": "MATCH p = (:Computer)-[:HasSession*1..]->(:User) RETURN p",
    "source": "https://raw.githubusercontent.com/SadProcessor/Cheats/refs/heads/master/DogWhispererV2.md"
  },
  {
    "description": "All logged‑in admins (user has a session on a computer they administer)",
    "query": "MATCH (c:Computer)-[:HasSession]->(u:User) WITH c,u MATCH p = shortestPath((u)-[:AdminTo|MemberOf*1..]->(c)) RETURN p",
    "source": "https://raw.githubusercontent.com/SadProcessor/Cheats/refs/heads/master/DogWhispererV2.md"
  },
  {
    "description": "Users who are **direct** members of a selected group",
    "query": "MATCH p = (u:User)-[:MemberOf*1..1]->(g:Group {name:$result}) RETURN p",
    "source": "https://raw.githubusercontent.com/SadProcessor/Cheats/refs/heads/master/DogWhispererV2.md"
  },
  {
    "description": "Users ≤ 3 hops from local‑admin rights on a selected computer",
    "query": "MATCH p = (u:User)-[:MemberOf|AdminTo*1..3]->(c:Computer {name:$result}) RETURN p",
    "source": "https://raw.githubusercontent.com/SadProcessor/Cheats/refs/heads/master/DogWhispererV2.md"
  }
]
